$(document).ready(
    function() {
        $.datepicker.setDefaults(
                $.datepicker.regional[ "{{ app.request.getLocale() }}" ]
        );
        $('.js-datepicker').datepicker(
                {
                    dateFormat: 'dd/mm/yy',
                    changeYear: true,
                    changeMonth: true
                }
        );

        var fieldsetControl = null;
        var nameInput = null;
        var targetNameInput = null;
        var descriptionTextArea = null;
        var targetDescriptionTextArea = null;
        var CKIntDescrTextArea = null;
        var language = '';
        var formName = '';
        var intName = '';
        var intDescr = '';
        var CKIntValueFocus = '';

        $('.rbins-name-cascade').on(
                'change',
                function (event, CKTrigger, triggerSource) {

                    fieldsetControl = $($(this).data('target'));
                    language = $($(this).data('language-source')).val();
                    formName = $(this).parents('form').attr('name');
                    nameInput = $('#' + formName + '_international_name');
                    targetNameInput = $('#' + formName + '_name_' + language);
                    intName = nameInput.val();
                    descriptionTextArea = $('#' + formName + '_international_description');
                    targetDescriptionTextArea = $('#' + formName + '_description_' + language);
                    intDescr = descriptionTextArea.val();
                    CKIntDescrTextArea = CKEDITOR.instances[(formName + '_international_description')];

                    switch ($(this).val()) {
                        case '1':
                            if (triggerSource !== 'onLoad') {
                                if (triggerSource !== 'descriptionChange') {
                                    targetNameInput.val(intName);
                                }
                                if (triggerSource !== 'nameChange') {
                                    targetDescriptionTextArea.val(intDescr);
                                }
                            }
                            targetNameInput.prop('readonly', true);
                            targetDescriptionTextArea.prop('readonly', true);
                            fieldsetControl.find('input').not('#' + formName + '_name_' + language).prop('readonly', false);
                            fieldsetControl.find('textarea').not('#' + formName + '_description_' + language).prop('readonly', false);
                            if (CKTrigger !== 'noCK') {
                                for (var key in CKEDITOR.instances) {
                                    if (key == (formName + '_description_' + language)) {
                                        CKEDITOR.instances[key].setReadOnly(true);
                                        if (triggerSource !== 'nameChange') {
                                            CKEDITOR.instances[key].setData(CKIntDescrTextArea.getData());
                                            CKEDITOR.instances[key].updateElement();
                                        }
                                    }
                                    else {
                                        CKEDITOR.instances[key].setReadOnly(false);
                                    }
                                }
                            }
                            break;
                        case '2':
                            fieldsetControl.find('input').prop('readonly', true);
                            fieldsetControl.find('textarea').prop('readonly', true);
                            if (triggerSource !== 'onLoad') {
                                if (triggerSource !== 'descriptionChange') {
                                    fieldsetControl.find('input').val(intName);
                                }
                                if (triggerSource !== 'nameChange') {
                                    fieldsetControl.find('textarea').val(intDescr);
                                }
                            }
                            if (CKTrigger !== 'noCK') {
                                for (var key in CKEDITOR.instances) {
                                    if (
                                            [
                                                formName + '_description_en', formName + '_description_fr', formName + '_description_nl'
                                            ].indexOf(key) >= 0
                                    ) {
                                        CKEDITOR.instances[key].setReadOnly(true);
                                        if (triggerSource !== 'nameChange') {
                                            CKEDITOR.instances[key].setData(CKIntDescrTextArea.getData());
                                            CKEDITOR.instances[key].updateElement();
                                        }
                                    }
                                }
                            }
                            break;
                        default:
                            fieldsetControl.find('input').prop('readonly', false);
                            fieldsetControl.find('textarea').prop('readonly', false);
                            if (CKTrigger !== 'noCK') {
                                for (var key in CKEDITOR.instances) {
                                    if (
                                            [
                                                formName + '_description_en', formName + '_description_fr', formName + '_description_nl'
                                            ].indexOf(key) >= 0
                                    ) {
                                        CKEDITOR.instances[key].setReadOnly(false);
                                    }
                                }
                            }
                    }
                }
        );

        $('.rbins-name-cascade').trigger('change', ["noCK", "onLoad"]);

        $('.rbins-language-source').on(
                'change',
                function () {
                    $($(this).data('cascade-field-class')).trigger('change', ["CK", "languageChange"]);
                }
        );

        $('.rbins-int-name').on(
                'change',
                function () {
                    $($(this).data('cascade-field-class')).trigger('change', ["noCK", "nameChange"]);
                }
        );

        $('.rbins-int-descr').on(
                'change',
                function () {
                    $($(this).data('cascade-field-class')).trigger('change', ["CK", "descriptionChange"]);
                }
        );

        CKEDITOR.on(
                'instanceReady',
                function (event) {
                    var editor = event.editor;
                    if (editor.name === (formName+'_international_description')) {

                        CKIntDescrTextArea.on(
                                'focus',
                                function(e) {
                                    CKIntValueFocus = CKIntDescrTextArea.getData();
                                }
                        );

                        CKIntDescrTextArea.on(
                                'blur',
                                function(e) {
                                    if (CKIntValueFocus != CKIntDescrTextArea.getData()) {
                                        $('.rbins-name-cascade').trigger('change', ["CK", "descriptionChange"]);
                                    }
                                }
                        );
                    }
                    switch ($('.rbins-name-cascade').val()) {
                        case '1':
                            if(
                                    editor.name == (formName + '_description_' + language)
                            ){
                                editor.setReadOnly(true);
                            }
                            else {
                                editor.setReadOnly(false);
                            }
                            break;
                        case '2':
                            if(
                                    [
                                        formName + '_description_en',formName + '_description_fr',formName + '_description_nl'
                                    ].indexOf(editor.name) >= 0
                            ){
                                editor.setReadOnly(true);
                            }
                            break;
                        default:
                            if(
                                    [
                                        formName + '_description_en',formName + '_description_fr',formName + '_description_nl'
                                    ].indexOf(editor.name) >= 0
                            ){
                                editor.setReadOnly(false);
                            }
                    }
                }
        );
    }
);
