<?php

namespace AppBundle\Repository;

/**
 * DepartmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentRepository extends BaseRepository
{
    /**
     * @param string $type
     * @param string $active Tells if we need to filter on active, non active or none "active" parameter
     * @param array $relatedFilters List of complementary filters to apply
     * @return \Doctrine\DBAL\Driver\Statement
     */
    protected function extractDepartmentsAndServices($type = '', $active = 'active', Array $relatedFilters = array())
    {
        $conn = $this->getEntityManager()->getConnection();
        $qb = $conn->createQueryBuilder();
        $params = array();
        $qb->select('DISTINCT d.id, 
                        d.name_en, 
                        d.name_nl,
                        d.name_fr,
                        case when d.is_active = TRUE then \'active\' else \'inactive\' end as "active"
                    ')
            ->from('department', 'd')
            ->orderBy('d.name_en');

        if ( in_array($type, array('department', 'section')) ) {
            $qb->andWhere('d.level = ?');
            $params[] = $type;
        }

        if ( in_array($active, array('active', 'inactive')) ) {
            $qb->andWhere('case when d.is_active = TRUE then \'active\' else \'inactive\' end = ?');
            $params[] = $active;
        }

        $this->composeNamingWhere($qb, $params, $relatedFilters, 'd.name_en', 'names');

        $this->composeNumericWhereIn($qb, $params, $relatedFilters, 'd.id', 'ids');

        if ( isset($relatedFilters['teams'] )) {
            if ( is_array($relatedFilters['teams']) ) {
                if (count($relatedFilters['teams']) > 0) {
                    $qb->innerJoin(
                        'd',
                        'departments_teams',
                        'dt',
                        'd.id = dt.department_ref'
                    );
                    $this->composeNumericWhereIn($qb, $params, $relatedFilters, 'dt.team_ref', 'teams');
                }
            }
        }

        if ( isset($relatedFilters['projects'] )) {
            if ( is_array($relatedFilters['projects']) ) {
                if (count($relatedFilters['projects']) > 0) {
                    $qb->innerJoin(
                        'd',
                        'departments_projects',
                        'dp',
                        'd.id = dp.department_ref'
                    );
                    $this->composeNumericWhereIn($qb, $params, $relatedFilters, 'dp.project_ref', 'projects');
                }
            }
        }

        if ( isset($relatedFilters['people'] )) {
            if ( is_array($relatedFilters['people']) ) {
                if (count($relatedFilters['people']) > 0) {
                    $qb->innerJoin(
                        'd',
                        'working_duty',
                        'wd',
                        'd.id = wd.department_ref'
                    );
                    $this->composeNumericWhereIn($qb, $params, $relatedFilters, 'wd.person_ref', 'people');
                }
            }
        }

        $qb
            ->setMaxResults(2000);
        $st = $conn->prepare($qb->getSQL());
        $st->execute($params);
        return $st;
    }
    
    /**
     * @param string $active Tells if the filter on the active departments
     * @param array $relatedFilters List of complementary filter options
     * @return array List of 3000 first found departments in database
     */
    public function listAll($active = 'active', Array $relatedFilters = array()) {

        $SQL = $this->extractDepartmentsAndServices($active, $relatedFilters);
        return $SQL->fetchAll();

    }

    /**
     * @param string $active Tells if the filter on the active directorates
     * @param array $relatedFilters List of complementary filter options
     * @return array List of 3000 first found directorates in database
     */
    public function listAllDirectorates($active = 'active', Array $relatedFilters = array()) {

        $SQL = $this->extractDepartmentsAndServices('department', $active, $relatedFilters);
        return $SQL->fetchAll();

    }

    /**
     * @param string $active Tells if the filter on the active sections
     * @param array $relatedFilters List of complementary filter options
     * @return array List of 3000 first found sections in database
     */
    public function listAllServices($active = 'active', Array $relatedFilters = array()) {

        $SQL = $this->extractDepartmentsAndServices('section', $active, $relatedFilters);
        return $SQL->fetchAll();

    }

}
